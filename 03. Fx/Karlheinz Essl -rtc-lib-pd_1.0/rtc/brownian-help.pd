#N canvas 271 188 579 389 10;
#X floatatom 91 191 0 0 0 2 min - -;
#X floatatom 134 191 0 0 0 2 max - -;
#X floatatom 177 190 0 0 0 2 brownian_factor - -;
#X floatatom 49 255 6 0 0 1 result - -;
#X obj 49 182 bng 15 250 50 0 empty empty empty 0 -6 0 8 -262144 -1
-1;
#X text 42 291 1993-98 by Gerhard Eckel;
#X text 43 309 vs. 1.1: seedable by RTC-seed;
#N canvas 503 52 568 672 ints-and-floats 0;
#X floatatom 125 146 0 0 0 2 min - -;
#X floatatom 182 146 0 0 0 2 max - -;
#X floatatom 239 145 0 0 0 2 brownian_factor - -;
#X floatatom 69 209 6 0 0 1 result - -;
#X obj 69 136 bng 15 250 50 0 empty empty empty 0 -6 0 8 -262144 -1
-1;
#X floatatom 74 383 6 0 0 1 result - -;
#X obj 74 310 bng 15 250 50 0 empty empty empty 0 -6 0 8 -262144 -1
-1;
#X text 70 253 If you use non-whole numbers like "1.5" for min or max
\, brownian will try to be smart and go into float mode automatically:
;
#X floatatom 72 571 6 0 0 1 result - -;
#X obj 72 498 bng 15 250 50 0 empty empty empty 0 -6 0 8 -262144 -1
-1;
#X text 59 92 If you want float values \, use "f" or "float" as last
\, fourth argument.;
#X text 69 606 This is done because Max handles floating point numbers
differently from integer values \, but in Pd everything is a float.
;
#X text 62 23 This abstraction can operate in two modes: int or float.
Default mode of operation is determined by its arguments. If you supply
whole numbers as "min" and "max" \, brownian will generate integer
values.;
#X text 71 443 You can override this smart behaviour by explicitly
ordering integer values using "i" or "int" as last \, fourth argument.
;
#X floatatom 307 203 6 0 0 1 result - -;
#X obj 307 160 bng 15 250 50 0 empty empty empty 0 -6 0 8 -262144 -1
-1;
#X obj 69 175 brownian -10 10 0.5 float;
#X obj 74 349 brownian -1.5 1.5 0.5;
#X obj 72 537 brownian -1.5 1.5 0.5 int;
#X obj 307 179 brownian -10 10 0.5 f;
#X connect 0 0 16 1;
#X connect 1 0 16 2;
#X connect 2 0 16 3;
#X connect 4 0 16 0;
#X connect 6 0 17 0;
#X connect 9 0 18 0;
#X connect 15 0 19 0;
#X connect 16 0 3 0;
#X connect 17 0 5 0;
#X connect 18 0 8 0;
#X connect 19 0 14 0;
#X restore 375 207 pd ints-and-floats;
#X text 296 207 Read this:;
#X text 17 25 brownian;
#X text 30 63 Random generator based on "brownian movements". Outputs
random numbers between min <int \, float> and max <int \, float> excluding
max. The distance between two random numbers is determined by the brownian
factor <float between 0 and 1>. When this factor is 1 \, "brownian"
behaves like an ordinary random generator. When the factor is O \,
always the same number is repeated.;
#X obj 49 221 brownian -10 10 0.5;
#N canvas 350 201 591 415 visual-example 0;
#N canvas 0 0 450 300 graph1 0;
#X array \$0-walker 50 float 0;
#X coords 0 10 49 -10 200 140 1;
#X restore 321 93 graph;
#X floatatom 177 190 0 0 0 2 brownian_factor - -;
#X obj 49 163 until;
#X msg 49 107 50;
#X obj 49 128 t a b;
#X obj 170 271 f 0;
#X obj 197 271 + 1;
#X obj 49 242 t a b;
#X obj 49 292 tabwrite \$0-walker;
#X msg 186 250 0;
#X msg 177 34 0;
#X msg 177 139 1;
#X msg 177 97 0.5;
#X msg 177 76 0.1;
#X msg 177 118 0.9;
#X obj 49 55 tgl 15 0 empty empty empty 0 -6 0 8 -262144 -1 -1 0 1
;
#X obj 49 74 metro 150;
#X msg 177 55 0.01;
#X obj 49 221 brownian -10 10 0.5;
#X connect 1 0 18 3;
#X connect 2 0 18 0;
#X connect 3 0 4 0;
#X connect 4 0 2 0;
#X connect 4 1 9 0;
#X connect 5 0 6 0;
#X connect 5 0 8 1;
#X connect 6 0 5 1;
#X connect 7 0 8 0;
#X connect 7 1 5 0;
#X connect 9 0 5 1;
#X connect 10 0 1 0;
#X connect 11 0 1 0;
#X connect 12 0 1 0;
#X connect 13 0 1 0;
#X connect 14 0 1 0;
#X connect 15 0 16 0;
#X connect 16 0 3 0;
#X connect 17 0 1 0;
#X connect 18 0 7 0;
#X restore 377 272 pd visual-example;
#X connect 0 0 11 1;
#X connect 1 0 11 2;
#X connect 2 0 11 3;
#X connect 4 0 11 0;
#X connect 11 0 3 0;
