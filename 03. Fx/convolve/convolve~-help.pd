#N canvas 323 167 786 499 10;
#N canvas 454 277 516 327 init 0;
#X msg 22 268 \; pd dsp 0 \;;
#X obj 122 281 soundfiler;
#X obj 156 108 s master-volume-set;
#X msg 156 87 0;
#X obj 22 16 loadbang;
#X obj -1 37 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 22 37 t b b b b b b b;
#X msg 142 211 read -resize ir-tam.wav ir3;
#X msg 152 231 read -resize ir-cym.wav ir4;
#X msg 132 191 read -resize ir-tunnel.wav ir2;
#X msg 122 171 read -resize ir-large-chamber.wav ir1;
#X connect 3 0 2 0;
#X connect 4 0 6 0;
#X connect 5 0 6 0;
#X connect 6 0 0 0;
#X connect 6 2 8 0;
#X connect 6 3 7 0;
#X connect 6 4 9 0;
#X connect 6 5 10 0;
#X connect 6 6 3 0;
#X connect 7 0 1 0;
#X connect 8 0 1 0;
#X connect 9 0 1 0;
#X connect 10 0 1 0;
#X restore 583 316 pd init;
#X floatatom 34 439 5 0 0 0 - master-volume -;
#N canvas 190 207 227 296 volume 0;
#X obj 46 24 inlet~;
#X obj 46 234 outlet~;
#X obj 46 159 *~;
#X obj 64 93 dbtorms;
#X msg 64 114 \$1 40;
#X obj 64 135 line~;
#X obj 64 72 r master-volume;
#X connect 0 0 2 0;
#X connect 2 0 1 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 5 0 2 1;
#X connect 6 0 3 0;
#X restore 34 276 pd volume;
#X obj 65 137 r conv;
#X obj 34 21 adc~ 1;
#X obj 99 97 readsf~;
#X msg 121 68 stop;
#X obj 583 337 table ir1;
#X obj 583 358 table ir2;
#X obj 583 379 table ir3;
#X obj 583 400 table ir4;
#X obj 34 42 *~;
#X obj 34 113 +~;
#X obj 64 42 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0 1
;
#X obj 58 224 env~;
#X floatatom 58 245 5 0 0 0 - - -;
#X obj 37 419 hsl 128 15 0 100 0 0 master-volume master-volume-set
master-volume -2 -8 0 12 -228856 -1 -1 0 1;
#X obj 316 23 cnv 15 450 190 empty empty empty 20 12 0 14 -233017 -66577
0;
#X obj 316 255 cnv 15 220 220 empty empty empty 20 12 0 14 -233017
-66577 0;
#X obj 338 442 s conv;
#X msg 338 296 analyze ir1;
#X msg 348 326 analyze ir2;
#X msg 358 356 analyze ir3;
#X msg 368 386 analyze ir4;
#X text 104 244 beware of hot output!;
#X obj 34 325 dac~;
#X obj 34 185 convolve~ 2048;
#X text 325 31 convolve~ is a partitioned impulse response (IR) convolution
object. The only creation argument is the partition size \, which also
determines the amount of delay.;
#X text 74 439 <--50dB may be enough!;
#X text 325 263 Try these different IRs;
#X text 325 171 It's ok to analyze different IRs on the fly - you should
only hear a momentary click when you do...;
#X msg 99 46 open voice.wav \, start;
#X text 325 81 To start \, you must send convolve~ the "analyze" message
along with the name of the table where your IR is stored. Then you
can play back the example voice.wav \, or listen to live input (with
headphones to prevent feedback). The gain scaling hasn't been worked
out yet \, so you'll have to find the right volume for your particular
settings.;
#N canvas 249 132 962 452 MORE 0;
#X text 8 17 With two pre-recorded sound files \, convolution is pretty
simple. We determine which file is longer \, find the next highest
power of 2 (we'll call it N) \, and then pad each of the files with
addiontal zeros up to N. Next \, we do a forward Fourier transform
on each of them \, and multiply the transformed data sets point by
point. Because the data contain imaginary values \, we must do a complex
multiply. After multiplication \, all that is left to do is an inverse
Fourier transform on the frequency domain product. Depending on the
specific FFT algorithm being used \, you may also have to scale the
amplitude by the reciprocal of N.;
#X text 8 167 This is the standard frequency domain method \, which
is much faster than performing convolution in the time domain. In either
case \, the result is that a scaled and time shifted copy of one file
takes the place of every single sample in the other. So \, if you have
an impulse response (IR) of a room - that is \, a burst of noise followed
by the natural echos the room produces - you can graft that pattern
of echos onto every single sample in your input file.;
#X text 8 287 With real-time input \, the situation becomes more complicated.
We can have an IR prepared in advance \, but the other sound source
only shows up bit by bit. Typically \, it will arrive in chunks of
64 \, 128 \, 256 \, or some other number of samples. Partitioned convolution
solves this problem by breaking up the IR into some number of partitions
that is each M samples long. M should be the same size as the chunks
of input that arrive in real time. Then \, each of the partitions is
Fourier transformed and stored as frequency domain data.;
#X text 518 247 The last point to make is that the size of the Fourier
transform must be M*2. That is \, when we get the latest M samples
\, we pad it out with zeros to M*2 samples \, then transform it. All
of the IR partitions are padded to this same size. When any one chunk
is inverse Fourier transformed \, its main content will be over the
first M samples \, trailed by low amplitude samples or zeros. A process
of overlapping and adding is then performed so that the first M samples
of the most recently processed M*2 samples is mixed down with the last
M samples of the previous chunk of processed M*2 samples.;
#X text 518 27 When each new input chunk arrives (the M most recent
samples) \, it is Fourier transformed into complex frequency domain
data. The new chunk of frequency domain data is multiplied against
each of the pre-prepared IR partitions that are also in the frequency
domain. We can immediately do an inverse Fourier transform on the most
recently available chunk to hear that portion of the processed input
in the time domain \, but the other chunks will wait in a buffer to
be output in the future. The crucial point to understand is that as
new input chunks come in and are transformed and multiplied in the
frequency domain \, we sum that new data with whatever other frequency
domain data was waiting in that part of the buffer. Thus \, we save
numerous FFT calls by summing in the frequency domain.;
#X restore 583 255 pd MORE INFORMATION;
#X connect 2 0 25 0;
#X connect 2 0 25 1;
#X connect 3 0 26 0;
#X connect 4 0 11 0;
#X connect 5 0 12 1;
#X connect 6 0 5 0;
#X connect 11 0 12 0;
#X connect 12 0 26 0;
#X connect 13 0 11 1;
#X connect 14 0 15 0;
#X connect 20 0 19 0;
#X connect 21 0 19 0;
#X connect 22 0 19 0;
#X connect 23 0 19 0;
#X connect 26 0 2 0;
#X connect 26 0 14 0;
#X connect 31 0 5 0;
