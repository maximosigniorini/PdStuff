--- g_rtext.c.org	2005-06-21 11:54:00.000000000 +0200
+++ g_rtext.c	2005-06-21 11:53:35.000000000 +0200
@@ -6,6 +6,8 @@
 /* have to insert gui-objects into editor-list */
 /* all changes are labeled with      iemlib      */
 
+/* IOhannes m zmölnig (20050621): added checks for NULL-pointers */
+
 #include <stdlib.h>
 #include <string.h>
 #include <stdio.h>
@@ -43,65 +45,87 @@
 
 t_rtext *rtext_new(t_glist *glist, t_text *who)
 {
-    t_rtext *x = (t_rtext *)getbytes(sizeof *x);
-    int w = 0, h = 0, indx;
-    x->x_height = -1;
-    x->x_text = who;
-    x->x_glist = glist;
-    x->x_next = glist->gl_editor->e_rtext;
-    x->x_selstart = x->x_selend = x->x_active =
+  if(glist && glist->gl_editor && who)
+    {
+      t_rtext *x = (t_rtext *)getbytes(sizeof *x);
+      int w = 0, h = 0, indx;
+      x->x_height = -1;
+      x->x_text = who;
+      x->x_glist = glist;
+      x->x_next = glist->gl_editor->e_rtext;
+      x->x_selstart = x->x_selend = x->x_active =
         x->x_drawnwidth = x->x_drawnheight = 0;
-    binbuf_gettext(who->te_binbuf, &x->x_buf, &x->x_bufsize);
-    glist->gl_editor->e_rtext = x;
-    sprintf(x->x_tag, ".x%lx.t%lx", (t_int)glist_getcanvas(x->x_glist),
-        (t_int)x);
-    return (x);
+      binbuf_gettext(who->te_binbuf, &x->x_buf, &x->x_bufsize);
+      glist->gl_editor->e_rtext = x;
+      sprintf(x->x_tag, ".x%lx.t%lx", (t_int)glist_getcanvas(x->x_glist),
+              (t_int)x);
+      return (x);
+    } else
+    return 0;
 }
 
 static t_rtext *rtext_entered;
 
 void rtext_free(t_rtext *x)
 {
-    if (x->x_glist->gl_editor->e_textedfor == x)
+  if(x){
+    if(x->x_glist && x->x_glist->gl_editor){
+      if (x->x_glist->gl_editor->e_textedfor == x)
         x->x_glist->gl_editor->e_textedfor = 0;
-    if (x->x_glist->gl_editor->e_rtext == x)
+      if (x->x_glist->gl_editor->e_rtext == x)
         x->x_glist->gl_editor->e_rtext = x->x_next;
-    else
-    {
-        t_rtext *e2;
-        for (e2 = x->x_glist->gl_editor->e_rtext; e2; e2 = e2->x_next)
-            if (e2->x_next == x)
+      else
         {
-            e2->x_next = x->x_next;
-            break;
+          t_rtext *e2;
+          for (e2 = x->x_glist->gl_editor->e_rtext; e2; e2 = e2->x_next)
+            if (e2->x_next == x)
+              {
+                e2->x_next = x->x_next;
+                break;
+              }
         }
     }
     if (rtext_entered == x) rtext_entered = 0;
     freebytes(x->x_buf, x->x_bufsize);
     freebytes(x, sizeof *x);
+  }
 }
 
 char *rtext_gettag(t_rtext *x)
 {
+  if(x)
     return (x->x_tag);
+  else
+    return 0;
 }
 
 void rtext_gettext(t_rtext *x, char **buf, int *bufsize)
 {
+  if(x){
     *buf = x->x_buf;
     *bufsize = x->x_bufsize;
+  } else {
+    *buf = 0;
+    *bufsize = 0;
+  }
 }
 
 void rtext_getseltext(t_rtext *x, char **buf, int *bufsize)
 {
+  if(x){
     *buf = x->x_buf + x->x_selstart;
     *bufsize = x->x_selend - x->x_selstart;
+  } else {
+    *buf = 0;
+    *bufsize = 0;
+  }
 }
 
 /* LATER deal with tcl-significant characters */
 
 static int firstone(char *s, int c, int n)
 {
+  if(s) {
     char *s2 = s + n;
     int i = 0;
     while (s != s2)
@@ -110,11 +134,13 @@
         i++;
         s++;
     }
+  }
     return (-1);
 }
 
 static int lastone(char *s, int c, int n)
 {
+  if(s){
     char *s2 = s + n;
     while (s2 != s)
     {
@@ -122,6 +148,7 @@
         n--;
         if (*s2 == c) return (n);
     }
+  }
     return (-1);
 }
 
@@ -150,6 +177,7 @@
 static void rtext_senditup(t_rtext *x, int action, int *widthp, int *heightp,
     int *indexp)
 {
+  if(x && heightp && indexp) {
     float dispx, dispy;
     char smallbuf[200], *tempbuf;
     int outchars = 0, nlines = 0, ncolumns = 0,
@@ -269,10 +297,12 @@
     *heightp = pixhigh;
     if (tempbuf != smallbuf)
         t_freebytes(tempbuf, 2 * x->x_bufsize + 1);
+  }
 }
 
 void rtext_retext(t_rtext *x)
 {
+  if(x){
     int w = 0, h = 0, indx;
     t_text *text = x->x_text;
     t_freebytes(x->x_buf, x->x_bufsize);
@@ -324,15 +354,19 @@
         x->x_bufsize = bufsize;
     }
     rtext_senditup(x, SEND_UPDATE, &w, &h, &indx);
+  }
 }
 
 /* find the rtext that goes with a text item */
 t_rtext *glist_findrtext(t_glist *gl, t_text *who)
 {
+  if(gl && gl->gl_editor){
     t_rtext *x = gl->gl_editor->e_rtext;
     while (x && x->x_text != who) x = x->x_next;
     if (!x) bug("glist_findrtext");
     return (x);
+  } else
+    return 0;
 }
 
 int rtext_width(t_rtext *x)
@@ -357,26 +391,31 @@
 
 void rtext_erase(t_rtext *x)
 {
+  if(x)
     sys_vgui(".x%lx.c delete %s\n", glist_getcanvas(x->x_glist), x->x_tag);
 }
 
 void rtext_displace(t_rtext *x, int dx, int dy)
 {
+  if(x)
     sys_vgui(".x%lx.c move %s %d %d\n", glist_getcanvas(x->x_glist), 
         x->x_tag, dx, dy);
 }
 
 void rtext_select(t_rtext *x, int state)
 {
+  if(x){
     t_glist *glist = x->x_glist;
     t_canvas *canvas = glist_getcanvas(glist);
     sys_vgui(".x%lx.c itemconfigure %s -fill %s\n", canvas, 
         x->x_tag, (state? "blue" : "black"));
     canvas_editing = canvas;
+  }
 }
 
 void rtext_activate(t_rtext *x, int state)
 {
+  if(x){
     int w = 0, h = 0, indx;
     t_glist *glist = x->x_glist;
     t_canvas *canvas = glist_getcanvas(glist);
@@ -398,12 +437,16 @@
         x->x_active = 0;
     }
     rtext_senditup(x, SEND_UPDATE, &w, &h, &indx);
+  }
 }
 
 void rtext_key(t_rtext *x, int keynum, t_symbol *keysym)
 {
     int w = 0, h = 0, indx, i, newsize, ndel;
     char *s1, *s2;
+
+    if(!x)return;
+
     if (keynum)
     {
         int n = keynum;
@@ -483,6 +526,9 @@
 void rtext_mouse(t_rtext *x, int xval, int yval, int flag)
 {
     int w = xval, h = yval, indx;
+
+    if(!x)return;
+
     rtext_senditup(x, SEND_CHECK, &w, &h, &indx);
     if (flag == RTEXT_DOWN)
     {
